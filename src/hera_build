#!/usr/bin/env python

import sys
import argparse
import subprocess
import struct

# Global variant
# GENOME: { 
#	chr_name: { 
#		seq: string,
#		order: integer,
#		gene_id: {
#			info: integer
#			transcript_id: [[exon_start, exon_end], ...]
#		}
#	}
#}
GENOME = {}
CHROMOSOME = []
INTEGER = 4 # Byte

def get_argument():
	parser = argparse.ArgumentParser(description='Get file path')
	parser.add_argument('--fasta', help='Input reference genome fasta file')
	parser.add_argument('--gtf', help='Input reference annotation gtf file')
	parser.add_argument('--outdir', help='Output directory')
	parser.add_argument('--full_index', help='Output directory')

	return parser.parse_args()

# Load genome sequence from fasta file
# Extract order and chromosome name for bam header index
def load_genome(args):
	print("Scan reference sequence ...")

	# Total number of byte need to write/read index
	# First integer store number of chromosome
	total = INTEGER

	with open(args.fasta, 'r') as f:
		name = seq = ''
		order = 0

		for line in f:
			if line[0] == '>':
				if name != '':
					total += len(name)
					GENOME[name] = {"seq" : seq, "order": order - 1}
					seq = ''
				name = line[1:-1].split(" ")[0]
				CHROMOSOME.append(name)
				order += 1
			else:
				seq += line[:-1]
		GENOME[name] = {"seq" : seq, "order" : order - 1}
		
		# 1 integer for name length
		# 1 integer for sequence length
		total += len(name) + 2*INTEGER*order
	return total

# Extract trascriptome information from gtf file
def extract_transcriptome(args):
	print ("Scan gtf file...")

	genes = []
	with open(args.gtf, 'r') as f:
		order = 0
		for line in f:
			if line[0] == '#':
				continue
			line = line[:-1].split('\t')

			key = line[8].replace(' \"', '\t').replace(' ', '').split('\";')
			if line[2] == 'gene':
				gene_inf = {}
				for k in key:
					k = k.split("\t")
					if k[0] == "gene_id" or k[0] == "gene_name":
						gene_inf[k[0]] = k[1]
				try:
					GENOME[line[0]][gene_inf["gene_id"]] = {"inf": order}
					genes.append(line[6] + gene_inf["gene_id"] + gene_inf["gene_name"])
					order += 1
				except:
					continue
			elif line[2] == 'transcript':
				transcript_inf = {}
				for k in key:
					k = k.split("\t")
					if k[0] == "gene_id" or k[0] == "transcript_id":
						transcript_inf[k[0]] = k[1]
				try:
					GENOME[line[0]][transcript_inf["gene_id"]][transcript_inf["transcript_id"]] = [] 
				except:
					continue
			elif line[2] == "exon":
				exon_inf = {}
				for k in key:
					k = k.split("\t")
					if k[0] == "gene_id" or k[0] == "transcript_id":
						exon_inf[k[0]] = k[1]
				try:
					GENOME[line[0]][exon_inf["gene_id"]][exon_inf["transcript_id"]].append( \
						[int(line[3]) - 1, int(line[4])])
				except:
					continue
	return genes

# Write index file
def write_index(total_byte, gene_info):
	print ("Extract transcript sequence")
	outdir = args.outdir
	if outdir[-1] != '/':
		outdir += '/'

	# Store sequence of all transcript
	f = open(outdir + "transcripts.fasta", "w")
	# Store index for query
	fi = open(outdir + "reference.inf", "wb")

	# BAM header [name length, name, sequence length]
	maxNameLen = 0
	fi.write(struct.pack("II", total_byte, len(CHROMOSOME)))
	for chr in CHROMOSOME:
		maxNameLen = max(maxNameLen, len(chr))
		fi.write(struct.pack("I", len(chr)))
		fi.write(chr.encode())
		fi.write(struct.pack("I", len(GENOME[chr]["seq"])))

	fi.write(struct.pack("II", len(CHROMOSOME), maxNameLen + 1))

	for chr in CHROMOSOME:
		fi.write(chr.encode())
		fi.write(('\0'*(maxNameLen - len(chr) + 1)).encode())
	for chr in CHROMOSOME:
		fi.write(struct.pack("I", len(GENOME[chr]["seq"])))

	# Gene name concated string
	maxNameLen = 0
	for gene in gene_info:
		maxNameLen = max(maxNameLen, len(gene))

	fi.write(struct.pack("II", len(gene_info), maxNameLen + 1))
	for gene in gene_info:
		fi.write(gene.encode())
		fi.write(('\0'*(maxNameLen - len(gene) + 1)).encode())

	# Consecutively write transcript info for each gene
	# [number of exon, [consecutive exon start], [consecutive exon end]]
	for chr in GENOME:
		for gene in GENOME[chr]:
			if gene == "seq" or gene == "order":
				continue
			for transcript in GENOME[chr][gene]:
				if transcript == "inf":
					continue
				f.write(">%s:%s\n" % (transcript, gene))
				GENOME[chr][gene][transcript] = sorted(GENOME[chr][gene][transcript])
				fi.write(struct.pack("I", len(GENOME[chr][gene][transcript])))
				for pos in GENOME[chr][gene][transcript]:
					fi.write(struct.pack("I", pos[0]))
					f.write("%s" % (GENOME[chr]["seq"][pos[0]:pos[1]]))
				for pos in GENOME[chr][gene][transcript]:
					fi.write(struct.pack("I", pos[1] - 1))
				f.write("\n")

	# Write chromosome that a transcript belong to in form of index order
	for chr in GENOME:
		for gene in GENOME[chr]:
			if gene == "seq" or gene == "order":
				continue
			for transcript in GENOME[chr][gene]:
				if transcript == "inf":
					continue
				fi.write(struct.pack("I", GENOME[chr]["order"]))

	# Write gene that a transcript belong to in form of index order
	for chr in GENOME:
		for gene in GENOME[chr]:
			if gene == "seq" or gene == "order":
				continue
			for transcript in GENOME[chr][gene]:
				if transcript == "inf":                                                     
					continue
				fi.write(struct.pack("I", GENOME[chr][gene]["inf"]))

	f.close()
	fi.close()

args = get_argument()
total_byte = load_genome(args)
gene_info = extract_transcriptome(args)
write_index(total_byte, gene_info)

# Call Hera index
path = sys.argv[0].replace("hera_build", "hera")
full = args.full_index
if str(full) == "None":
	full = "0"
subprocess.call([path , "index", args.outdir + "transcripts.fasta", args.fasta, args.outdir + "index", full])
